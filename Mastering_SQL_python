# using Mac, so wwe will download Postgres.app[free and open-source relational database management system (RDBMS) emphasizing extensibility and SQL compliance.]
as the SQL local server

#RDBMSes are a subset of DBMSes. A relational database refers to a database that stores data in a structured format, using rows(records) and columns(field).

# An important feature of A single database is it has several tables.

# SQL(Structural querying language) used to communicate with the database. SQL allows the user to use series of commands and queries to retrieve or update data(CRUD)

# "Select" , "Insert", "Drop", "Delete" are queries that can do an action

# PSequel similar to PGAdmin is a free PostgresSQL GUI tool for MAcOX

## to CREATE a database 
CREATE DATABASE learn_db;

## to CREATE a table with a column(field)
CREATE TABLE test_table (
  a INTEGER
)

# to check for data types of postgres [https://www.postgresql.org/docs/9.5/datatype.html]

## to CREATE a table with two fields
CREATE TABLE people (
  id INTEGER,
  name VARCHAR (255)
)

# To DELETE from a table
DROP TABLE people;

# to ADD to table
INSERT INTO people VALUES (1, "Corey")

INSERT INTO people (name, id) VALUES ('Kwame', 4)

INSERT INTO people (name, id) VALUES ('Kwame', '4')

# to create a table with mutiple fields
create table employees (
     id int,
     first_name char (255),
     last_name  char (255),
     age        int,
     occupation	char (255)
)

# to show data of table employees, schema = public
select * from public.employees;

#################################EXAMPLE##############################
create table employees (
	 id int,
     first_name char (255),
	 last_name  char (255),
	 age        int,
	 occupation	char (255)
)

insert into employees values (1, 'John', 'Smith', 33, 'Teacher');
insert into employees values (2, 'Donald', 'Decker', 40, 'Engineer');

select * FRom public.employees;

SELECT first_name,last_name FROM people;
##############################EXAMPLE################################

## to READ (RETRIEVE) values from table
SELECT * FROM people

SELECT first_name, last_name FROM table

SELECT * FROM people
WHERE last_name = 'DONALD'
AND age < 30
ORDER BY age DESC;

# And = where both conditions are met
# OR = where either one condition is met
# ORDER BY age = arrange by increasing order(lowest to highest)
# ORDER BY age DESC = arrange by decreasing order(highest to lowest)
# ORDER BY first_name, last_name = arrange first by first field, and arrange next by second field

## to UPDATE and DELETE records # updates all the records in the location field
UPDATE test_table_1
SET location = 'UNKNOWN'

UPDATE people
SET occupation = 'Programmer'
WHERE first_name = 'Jane'
AND last_name = 'Smith'

## Deletes all the records, becuase there is no where
DELETE FROM test_table



# first run select before updating to avoid deleting records mistakenly


## Python SQLite Tutorial
SQLite is a C library that provides a lightweight disk-based database that doesn’t require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. 
Some applications can use SQLite for internal data storage. 
It’s also possible to prototype an application using SQLite and then port the code to a larger database such as PostgreSQL or Oracle

# To use the module, you must first create a Connection object that represents the database. Here the data will be stored in the example.db file:
import sqlite3
conn = sqlite3.connect('example.db')

# Once you have a Connection, you can create a Cursor object and call its execute() method to perform SQL commands
c = conn.cursor()

# Create table
c.execute('''CREATE TABLE stocks
             (date text, trans text, symbol text, qty real, price real)''')

# Insert a row of data
c.execute("INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)")
c.execute("INSERT INTO stocks VALUES ('2007-01-05','RENT','FHAT',200,37.14)")

# Save (commit) the changes
conn.commit()

# We can also close the connection if we are done with it.
# Just be sure any changes have been committed or they will be lost.
conn.close()

c.execute("SELECT * FROM stocks WHERE symbol='RHAT'")
print(c.fetchall())

conn.commit()
conn.close()

## employee.py

class Employee:
    """A sample Employee class"""

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.pay = pay

    @property
    def email(self):
        return '{}.{}@email.com'.format(self.first, self.last)

    @property
    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def __repr__(self):
        return "Employee('{}', '{}', {})".format(self.first, self.last, self.pay)
	
	
## sqlite3_demo.py
import sqlite3
from employee import Employee

conn = sqlite3.connect(':memory:')

c = conn.cursor()

c.execute("""CREATE TABLE employees (
            first text,
            last text,
            pay integer
            )""")


def insert_emp(emp):
    with conn:
        c.execute("INSERT INTO employees VALUES (:first, :last, :pay)", {'first': emp.first, 'last': emp.last, 'pay': emp.pay})


def get_emps_by_name(lastname):
    c.execute("SELECT * FROM employees WHERE last=:last", {'last': lastname})
    return c.fetchall()

def get_emps_all():
    c.execute("SELECT * FROM employees")
    return c.fetchall()


def update_pay(emp, pay):
    with conn:
        c.execute("""UPDATE employees SET pay = :pay
                    WHERE first = :first AND last = :last""",
                  {'first': emp.first, 'last': emp.last, 'pay': pay})


def remove_emp(emp):
    with conn:
        c.execute("DELETE from employees WHERE first = :first AND last = :last",
                  {'first': emp.first, 'last': emp.last})

emp_1 = Employee('John', 'Doe', 80000)
emp_2 = Employee('Jane', 'Doe', 90000)

insert_emp(emp_1)
insert_emp(emp_2)

emps = get_emps_by_name('Doe')
print(emps)

update_pay(emp_2, 95000)

remove_emp(emp_1)

emps = get_emps_by_name('Doe')
print(emps)

emps = get_emps_all()
print(emps)

conn.close()    

# print(emp_1.fullname)



 




