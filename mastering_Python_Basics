# Python data types
# Python does not statically define data types however there are stored as primitive data types internally
# We can see that using the type() function

w = 5
print("W=",type(w))

x = "5"
print("X=",type(x))

y = 5.0
print("Y=",type(y))

z = True
print("Z=",type(z))

# The data type of a variable can be flexibly assigned in Python (though not recommended)
z = 5
print("New Z = ", type(z))

# Formatted Printing content

print("Hello World")

x = "Pluto"
print(f"Hello {x}")

say_hello = "Hello {}"
print(say_hello.format("Jupiter"))

# Control flow : If .. Else .. , conditional statements

# if else statement
print("If Else statement")
x=3
if x==1:
    print("X is 1")
elif x==2:
    print("X is 2")
else:
    print("X is 3")
print()

# Conditional statements:
# it is a shorthand for if else statements
print("Conditional Statement")
y = "X is 1" if x==1 else "X is not 1"
print(y)
print()

# Conditonal using a true value: False, 0, "", [], .. are considered false, everything else is true
# You dont have to use value == False 
print("True value representation")
true_value = "some_string"
false_value = ""
print("True value" if true_value else "False value")
print("True value" if false_value else "False value")


# Loops : for loop, while loop

# For Loop: Loops for all elements in a given list/iterable 

# range(5) would generate an iterable consiting of 5 values 0,1,2,3,4
# for loop will then print these values

# definition of range is range(start=0, stop, step=1) , it is not inclusive of the stop value
# range(3) will result in 0,1,2
# range(1,3) will result in 1,2
# range(0,3,2) will result in 0,2
# range(3,1,-1) will result in 3,2


print("For Loop")
for i in range(5):
    print(i, end=",")

print()
print()
print("While Loop")
x = 0
while(x<5):
    print(x, end=",")
    x=x+1

#List - Ordered sequence of objects

lst = [1,2,3]
print(lst)
print(type(lst))


# Accessing values
print("\nAccessing Values")
print(lst[0])
print(lst[0:2])
print(lst[1:])
for i in lst:
    print(i, end=", ")
    
print()
# List Operations
print("\nList Operations")
print(len(lst)) # length
print([1,2,3]+[3,4,"hello"]) # concatenation, new memory created for 3rd tuple
print(["Copy"]*2) # Replication
print(1 in lst) # membership

# functions
print("\nFunctions")
lst.append(3)
print(lst)

lst.extend(["New","Value"])
print(lst)

print(lst.index(3))
lst.reverse()
print(lst)

lst2 = [1,4,1,2,0]
lst2.sort()
sorted(lst2)
print(lst2)

# there are many more functions like count(), clear(), copy() . Ref: https://www.w3schools.com/python/python_ref_list.asp


# Set : Set is an UN-ORDERED collection of elements
# Its similar to mathematical sets, it does not consist of repetitions
# We can do lot of cool stuff with sets, they are computationally cheaper as compared to lists

s = {1,2,3,3}
print(s)
print(type(s))

# Accessing values- sets are not subscriptable
print("\nAccessing Values")
# print(s[0]) -> this will result in an erorr

# You can loop through a set but the result can be in any order
for i in s:
    print(i, end=", ")

print()
# You can also use the membership operation
# It is O(1) vis-a-vis O(n) in Lists
print("\nMembership")
print(1 in s)
print(7 in s)

# You can add a element to set
s.add(4)
print(s)

# You can update a set with a new set
new_set={2,3,7,8}
s.update(new_set)
print(s)


# You can perform almost all kinds of algebra of sets i.e. Unions, Intersections, 


# Dictionary - dict
# A dict is a combination of key value pairs denoted as { ... ,key: value, ...}
# Duplicate keys are not allowed

my_dict = {
    "first_name": "John",
    "last_name": "Doe",
    "age": 109,
    "education": ["school 1", "school 2"],
}

print(my_dict)
print(type(my_dict))
# We can access a value from dict using the key
print(my_dict["first_name"])

# print(my_dict["height"]) would raise a KeyError since Height is not a part of this dict
# we can use the dict.get() function to provide a default value as follows
print(my_dict.get("height", "NA"))

# We can get the numbers of keys in a dict
print(len(my_dict))


print("\nIterate through lists")
# we can get an iterable of the keys or values using the keys() or value() functions
print("\nKeys")
for i in my_dict.keys():
    print(i,end=", ")
print()

print("\nValues")
for i in my_dict.values():
    print(i, end=", ")
print()

print("\nItems")
# Using items() will return a iterable with tuple (k,v)  as values
for key,value in my_dict.items():
    print(f"{key}: {value}")

print("\nMembership")
print("age" in my_dict)
print("height" in my_dict)


#Update a dict
print("\nUpdate a Dict")
my_dict["age"] = 24
my_dict["height"]=172
print(my_dict)


# Function definition in python

def foo(statement):
    print(f"foo {statement}")

foo("bar")
foo("baaarr")


# Classes in python

class Car:
    def __init__(self, color, brand):
        self.color = color
        self.brand = brand
    
    def get_car(self):
        print(f"This is a {self.color} {self.brand}")
    
    def set_color(self, new_color):
        self.color = new_color

car1 = Car("red", "mustang")
car2 = Car("green", "corvette")

car1.get_car()
car2.get_car()

car2.set_color("yellow")
car2.get_car()


