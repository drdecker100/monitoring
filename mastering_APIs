# API application programming interface

# Interface = how to get things to work, but not necessarily how it does that
setting an alarm on a wall clock via the interface, but not knowing the process it takes to set it up

# button on devices == interface

# code runs on the button

# finds way to interact with the source and destination

#API
Set of tools designed for software developers

Saves you from creating eveything yourself

Software intermediary that allows two applications to talk to each other. Each time you use an app like Facebook, send an instant message, or check the weather on your phone, you're using an API.

An API is a set of definitions and protocols for building and integrating application software.

An application implementing a RESTful API will define one or more URL endpoints with a domain, port, path, and/or querystring — for example, https://mydomain/user/123?format=json

#RESt API
Conforms to the constraints of REST architectural style and allows for interaction with RESTful web services

#HOW THE WEB WORKS

 The web is a system for publishing pages of information on the internet, and for linking pages together using links.
 Anyone can publish a page by uploading it to a web server. Anyone can read that page by typing its address into a web browser.
 
 The web would be useful but annoying if you had to type the precise address- the URL (uniform resource locator) - for every page you wanted. 
 Fortunately, you don’t have to. Web pages can include embedded links or ’hyperlinks’, so simply clicking the link will take you to that page. 
 Following a trail of links is called ‘web surfing’.
 
 The web is also traversed by ’spiders’ (or software robots) that follow links and collect information that can be used by search engines such as Google. 
 Not all web users are human!
 
 Web pages are written in text with Hypertext Markup Language (HTML), then uploaded to a host computer running web server software, such as Apache or Microsoft’s IIS (Internet Information Server).
 
 The web server sends out pages when they are requested by a web browser (web client)
 
 The host and client communicate using an agreed ’language’ called HTTP (HyperText Transfer Protocol) or HTTPs(HTTP over SSL) 
 This is why web page addresses begin with http:// and so on
 
 URI(uniform resource Identifier)  = URL(Uniform Resource Locator) + http verb (GET/POST/PUT/DELETE)

# HTTP VERBS vs CRUD
POST = Create
GET = Read / Retrieve
PUT = Update/Replace
PATCH = Update/Modify
DELETE = Delete

# HTTP HEADERS
HTTP headers let the client and the server pass additional information with an HTTP request or response

# RESTFUL API CONSTRAIT 
Client-Server Architecture
Statelessness
LAyered System
Cacheability
Uniform Design
Cosde on Demand

# myProgram ---> HTTP GET ---> Server/Host
stateless so you will have to send info(like auth info and user credentials) via headers every time/ request

# Everything on the web page is a resource (collection of items/lists of items)

# JSON(Javascript Object Notation)
JSON is an open standard file format, and data interchange format, 
that uses human-readable text to store and transmit data objects consisting of attribute–value pairs and array data types.

# drdecker100+apicourse@gmail.com

# Exploring APIS online (spotify.com) and hadtochange
https://developer.spotify.com/console/get-search-item/?q=lizzo&type=artist&market=&limit=&offset=&include_external=

#Using CURL on either MAC/linux or Windows tO CREATE (POST)
WIth Windows, you can use git bash to use curl

curl 'https://api.hadtochange.com/2010-04-01/Accounts/ACce93e656933d09cb4c2924a1f36b9c0e/Messages.json' -X POST \
--data-urlencode 'To=+17405907351' \
--data-urlencode 'From=+14158959591' \
--data-urlencode 'Body=Ahoy World Needs You' \
-u ACce93e656933d09cb4c2924a1f36b9c0e:1baf3ae113c2094f39df1ff5df9da53a | python -m json.tools

import json
print (json.dumps(response.json(), indent=4, sort_keys=True))

# To Get(read to the endpoint/interface)
$ curl "https://api.hadtochange.com/2010-04-01/Accounts/ACce93e656933d09cb4c2924a1f36b9c0e/Messages.json" -X GET \
--data-urlencode "To=+17405907351" \
-u ACce93e656933d09cb4c2924a1f36b9c0e:1baf3ae113c2094f39df1ff5df9da53a | python -m json.tool

# Using POSTMAN to test APIs
Create a new collection to store all requests

Set Authorization locally so every request can use those variables in the request headers

URL for the GET meassage
"https://api.hadtochange.com/2010-04-01/Accounts/{{ACCOUNT_SID}}/Messages.json"

# Postman also helps generate codes

#Using Twilio helper libraries in code to make calls to endpoints

from twilio.rest import Client

client = Client(
        "ACce93e656933d09cb4c2924a1f36b9c0e",
        "29d3b1f5acb9b9bb9b8dd819b1111fdc"
)

def twilioReadAll():
    for msg in client.messages.list():
        print(msg.body)
 
def twilioCreateAnObject():  
    msg = client.messages.create(
    to="+17405907351",
    from_="+14158959591",
    body= "Hello from Python",
    )
    print(f"Created a new message: {msg.sid}")

def twilioDelete():
    for msg in client.messages.list():
        if "Ahoy" in msg.body:
            print(f"Deleting {msg.body}")
            msg.delete()
        
print(twilioReadAll())
print()

#Using FLASK 
Flask is a popular Python web framework, meaning it is a third-party Python library used for developing web applications.

Web frameworks provide a standard way to build and deploy web applications on the World Wide Web.

import os

from dotenv import load_dotenv
from flask import (
    Flask,
    flash, 
    render_template, 
    redirect,
    request,
    url_for,
)


load_dotenv()
app = Flask(__name__)
app.secret_key = "ssssh don't tell anyone"

TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')

def get_sent_messages():
    # TODO: Make this return a collection of messages that were sent from the number
    messages = []
    return messages

def send_message(to, body):
    # TODO: Send the text message
    client.messages.create(
    to= to,
    from_= TWILIO_PHONE_NUMBER,
    body= body,
    )
    

@app.route("/", methods=["GET"])
def index():
    messages = get_sent_messages()
    return render_template("index.html", messages=messages)

@app.route("/add-compliment", methods=["POST"])
def add_compliment():
    sender = request.values.get('sender', 'Someone')
    receiver = request.values.get('receiver', 'Someone')
    compliment = request.values.get('compliment', 'wonderful')
    to = request.values.get('to')
    body = f'{sender} says: {receiver} is {compliment}. See more compliments at {request.url_root}'
    send_message(to, body)
    flash('Your message was successfully sent')
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run()


















