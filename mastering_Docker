-------------------------------------------------
#DOCKER
--------------------------------------------------
#Tool designed to make it easier to create, deploy and run applications by using containers
#Allows developer to package up an application with all of the oarrs ut needs , such as libraries and dependencies,and ship it all out as one package 

#CONTAINER is simply to isolate a process that is running from other processes

#NAMESPACE is the ID of the process of the container

#C groups allow you to limit the usage of the resources like the CPU, memory and lots of resources to the container only

#Container contains a process which runs in a namespace and has a set of rules(c groups) to control it

Scratch is the base for any image you are going to build in docker

On top of the base(parent to centos), we put a patent system(eg.centos)(child to base) ,and put some process or service(apache) to run on the system
Scratch-> Centos-> Apache->Cache
----------------------------------------------- 
#Container 
-----------------------------------------------
Infra> host OS> Docker > Cont.. A,B,C{libs,Apps}
#Virtual Machines
Infra > hypervisor>VMA,B,C{OS,libs,GuestOS}
#
Hypervisor > manager for the VMs

#Differences
With VMs , we are using more resources, because you need more memory(1Gig RAM) to spin up the OS
With Docker, when you delete the container and the patent system(OS) is not affected

#How do we build the image?
Dockerfile is a plain text file, you define instructions to create an image
>>FROM centos
  (Meaning i want centos as the OS layer;gives you the binaries that is going to be used as base )
(In this case scratch base is the default ,so deployed automatically)
>>RUN yum -y install httpd
(Running instructions, based on the patent system you choose,it will give you the ability to install packages)
(The libraries that the application needs)
CMD apachectl -DFOREGROUND
(The command that will be triggered once the container gets created- to start the process)

#Docker Architecture
Once you install docker on your machine or your computer or in any server, then automatically that server becomes a docker host
Hence your machine that has docker installed is actually capable to run containers and build images

#Docker Host is the house of all created containers 

#Docker Host Ecosytem
Client-- REST API -- Server

Server(docker daemon)
That is the process that is started once you install docker 

Client(docker CLI)
Thats is How you interact with the docker server but you cannot talk to the server without an API.Basically dokng API calls to the server and its giving you back a response

#Client can manage container, image, network and data volumes
--------------------------------------------------------------------------------
#LAYERING IN DOCKER
---------------------------------------------------------------------------------
Image is a template where you define all the binaries and libraries that the application will need.
the container is the runtime of the image . Hence, can have one template as an image and just create multiple containers using that image.
Layers inÂ  images are read only layers.Once you create and image ,you cannot modify any layer in that image.
Instead you can create another image and start from the layer that you want
Actually version images because we cant modify an image
Basically, when you create a container you add a new layering on top of the image which is a read/write layer( that is you can modify the contents of the image in layer that was added)
Spin up as many containers as you want from one image
Docker INSTALLATION ON UBUNTU
Create a ubuntu server EC2 instance on AWS or on VM locally
--------------------------------------------------------------------------------
Docker Official Image
--------------------------------------------------------------------------------
You can download pre-defined images from hub
E.g docker pull nginx

docker pull nginx:1.15.12
To download previous version(tags)
Docker Hub 
Centralised repo for docker images
docker pull mysql
docker pull httpd
docker pull mysql:5.7

#To view images
docker images

#to delete an image
docker rmi <name or id of the image> 
# if tag is attached ,need to include tag
------------------------------------------------------------------------------
CREATING A CONTAINER
------------------------------------------------------------------------------
docker run -d nginx:alpine
-d detach mode(in d background)

#to delete a container
docker rm <container id or name>

#how to test if a container is working, we need to expose the port
docker run -d  -p 9090:80 nginx:alpine

#similar to port forwarding
Pointing  port 9090 to port 80 on the container

#To test, open a browser(client)
127.0.0.1:9090 
<private ip:9090>

#to kill running container
docker rm -f <container-id>
docker rm --force <container-id>

#Building Your Own Image
-struggling to find a pre-defined image
-create a Dockerfile
- you can use any image in the Dockerfile regardless the host OS

FROM centos
(FROM centos:tag)
RUN yum -y install httpd
(Installing apache on centos, by default ,tge image doesnt come with sudo installed since it is light)

# to build an image with the instruction in the Dockerfile
docker build --tag centos_apache:v1 .
docker images | grep centos

#testing your image by creating a docker container

#Container exited because there was no process
docker ps --all (-a)
docker run --name centos_test -d centos_apache:v1

FROM centos
RUN yum -y install httpd
CMD apachectl -DFOREGROUND 
(this will start the process inside the container and keep the container process alive)

#to build image out of the Dockerfile
docker build --tag centos_apache:v2 .

#to run a container out of the image
docker run --name centos_yescmd -d centos_apache:v2

# to map the port of the machine to the port of the container

#to run a container out of the image
docker run -d -p 9090:80 --name centos_yescmd centos_apache:v2

#test container with browser
127.0.0.1:9090

#to kill running container
docker rm -f centos_yescmd centos_nocmd

#Creating another Dockerfile
nano Dockerfile2
FROM nginx:alpine

#to build image from dockerfile2
docker build --tag nginx_custom:v1 --file Dockerfile2 .

RUN echo "Overwrite homepage" > /usr/share/nginx/html/index.html

#rebuild image
docker build -t nginx_custom:v2 -f Dockerfile2 .

#run container from image
docker run -d -p 9090:80 --name nginx nginx_custom:v2

----------------------------------------------------------------------
#COPY FILES WITH COPY
----------------------------------------------------------------------
cp -r templates/startbootstrap-freelancer-master/ docker-images/

mv startbbotstrap-freelancer/ html_code

FROM centos 
RUN yum -y install httpd
COPY html_code /var/www/html
CMD apachectl -DFOREGROUND

docker build -t apache_with_code:v1 .

docker run --name apache -d -p 9090:80 apache_with_code:v1

#you can copy entire folder, file, code to image
------------------------------------------------------------------
#ADD INSTRUCTION(downloading files from Internet )
------------------------------------------------------------------
ADD <url to a code or folder> <destination on your container>

FROM centos 

RUN yum -y install httpd unzip

ADD https://github.com/mdn/... /var/www/html/code.zip

RUN cd /var/www/html/ && unzip code.zip &&& mv /var/www/html/beginner-html-site-styled-gh-pages/* /var/www/html

CMD apachetcl -DFOREGROUND

#build image 
docker build -t apache_with_code:v2 -f Dockeefile3 .

#run container
docker run -d --name apache -p 9090:80 apache_with_code:v2

#test with browser
127.0.0.1:9090

-------------------------------------------------------
ENV instruction
------------------------------------------------------
#ENV instruction sets the environment variable key to the value 
FROM centos

RUN yum -y install httpd unzip

ENV HTML beginner-html-site-styled

ADD https://github.com/mdn/$HTML/archive/gh-pages.zip /var/www/html/code.zip

RUN cd /var/www/html/ && unzip code.zip && mv /var/www/html/$HTML-gh-pages/* /var/www/html && echo $HTML > /var/www/html/env.html

CMD apachetcl -DFOREGROUND
--------------------------
WORKDIR instruction
--------------------------
FROM centos

RUN yum -y install httpd unzip

ENV HTML beginner-html-site-styled

WORKDIR /var/www/html

ADD https://github.com/mdn/$HTML/archive/gh-pages.zip ./code.zip

RUN unzip code.zip && mv $HTML-gh-pages/* . && echo $HTML > ./env.html

CMD apachetcl -DFOREGROUND

------------------------------
LABEL
------------------------------
#just a metadata
LABEL maintainer=Ricardo
LABEL vendor=companyB

----------------------------
VIEW INSIDE OF RUNNING CONTAINER
----------------------------
docker exec --tty --interactive apache10 bash

---------------
USER to change user
---------------
RUN useradd application && chown aplication:application /var/www/html -R 
USER application
RUN rm -rf code.zip $HTML-gh-pages
USER root

------------------------
ARG
-----------------------
ARG user=application
#build with args

docker build -t apache_with_code:v8 -f Dockerfile3 --build-arg user=ricardo .


------------------------
CMD
------------------------
#core of the container
#as long aa the process that you put into the CMD is alive ,then the conatiner will be alive

------------------------
OUTPUT from CMD
------------------------
Logs related to CMD
#docker logs <container name>
#creating a bash script
#!/bin/bash
echo "Starting httpd"
apachectl -DFOREGROUND

COPY cmd.sh /cmd.sh

RUN chmod +x /cmd.sh 

#giving executable permission to run script
CMD /cmd.sh

---------------------------------
FROM centos

ARG user=application
ARG httpd_package

RUN yum -y install $http_package unzip

LABEL maintainer=Ricardo
LABEL vendor=companyB

ENV HTML beginner-html-site-styled

WORKDIR /var/www/html

ADD https://github.com/mdn/$HTML/archive/gh-pages.zip ./code.zip

RUN unzip code.zip && mv $HTML-gh-pages/* . && echo $HTML > ./env.html

RUN useradd $user && chown $user /var/www/html -R

USER $user

RUN rm -rf code.zip $HTML-gh-pages/

USER root

COPY cmd.sh /cmd.sh

RUN chmod +x /cmd.sh

CMD /cmd.sh

--------------------------
docker build -t apache_with_code:v11 -f Dockerfile3 --build-arg user=ricardo --build-arg httpd_package=httpd .
--------------
##Careful with CONTEXT(directory holding all our needed files)!

---------------
Incase we are not running the builder command in the directory holding our needed files
docker build -t apache:v11 -f docker -images/Dockerfile3 docker-images/
-------------
#checking file size
du -shc *
du -sh templates/
##using docker ignore file 
-a hidden file that allows you to ignore folders or files in your context
#creating a dcokerignore file
vi .dockerignore
#copy and paste files/folders into the dockerignore files
templates
#content should be as small as possible to improve performance

--------------------------------
BEST PRACTICES
--------------------------------
#One service per container
#Build context should be small
#Avoid unnecessary packages
#less layers
#less layers
#has 4 layers

FROM nginx:alpine

RUN echo "1" >> /usr/share/nginx/html/test.html

RUN echo "2" >> /usr/share/nginx/html/test.html

RUN echo "3" >> /usr/share/nginx/html/test.html

# has 3 layers

FROM nginx:alpine

ENV webfile /usr/share/nginx/html/test.html

RUN \
      echo "1" >> $webfile && \
      echo "2" >> $webfile && \
      echo "3" >> $webfile

docker ps
------------------------------
#building an image with HTTP + SSLTLS+ PHP

------------------------------
FROM centos 

RUN yum -y install httpd php php-mysql

COPY html-ssl /var/www/html

RUN echo "<?php phpinfo( ); ?>" > /var /www/html/test.php

CMD apachectl -DFOREGROUND

-------------------------------------
#Generating self signed certificate and key TO CONFIGURE SSL
-------------------------------------
openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout docker.key -out docker.crt

CommonName: <ip adddress of server or localhost>

#creating ssl config file

nano ssl.conf

<VirtualHost *:443>
              SSLEngine on
              SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP
              SSLCertificateFile    /etc/ssl/docker.crt
              SSLCertificateKeyFile.     /etc/ssl/docker.key
              Server Admin example@it.com
              DocumentRoot "/var/www/html"
              ServerName <ip address>
              ErrorLog /var/www/html/error.log
</VirtualHost>



FROM centos 
RUN \
          yum -y install \
          httpd \
          php php-mysql \
          mod_ssl \
          openssl

COPY html-ssl /var/www/html

RUN echo "<?php phpinfo( ); ?>" > /var /www/html/test.php

COPY docker.crt  /docker.crt

COPY docker.key /docker.key

COPY ssl.conf /etc/httpd/conf.d/default.conf

CMD apachectl -DFOREGROUND

----------------------
Filtering Out by Name
-----------------------
docker ps -a -f=name=apache
docker run -d -p 443:443 --name apache_ssl apache_ss1:v2

#test ssl webpage
https://35.171.121.237

---------------------------------
Dangling Images
---------------------------------
docker images
# means you created the new build of the image , but it wasnt given a name or was given a same name
#we use tags to prevent dangling images
docker ps -a

-----------------------------------
How To Delete Dangling Images
------------------------------------
docker images --filter dangling=true

docker images -f dangling=true -q

#show only the id

#to delete
docker rmi $(docker dangling=true -q)

#always build images with tags to prevent dangling images

---------------
Create an Image with Nginx + PHP7
---------------

#create a Dockerfile
nano Dockerfile-Nginx

#create nginx.repo to install ngunx from repo
nano nginx.repo
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/mainline/centos/7/$basearch/
gpgcheck=0
enabled=1

#mkdir nginx && cd nginx

#mkdir conf && cd conf && nano nginx.repo 

# configure vhost config for nginx
copy from github.com/lukearmstrong/7155390

#create a nginx.conf file
nano conf/nginx.conf

-----------
server {
	listen 80;
	server_name <ip address>;

	access_log /nginx_php/access.log;
	error_log  /nginx_php/error.log error;

	root /nginx_php;
	index index.php index.html;

	location / {
		try_files $uri $uri/ /index.php?$query_string;
	}

	location ~ \.php {
		fastcgi_index index.php;
		fastcgi_pass 127.0.0.1:9000;

		include fastcgi_params;
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_param PATH_INFO $fastcgi_path_info;
		fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	}

	# Prevents caching of css/less/js/images, only use this in development
	location ~* \.(css|less|js|jpg|png|gif)$ {
		add_header Cache-Control "no-cache, no-store, must-revalidate"; 
		add_header Pragma "no-cache";
		expires 0;
	}
}
-------------


#create script to handle both php and nginx processes

nano conf/start.sh

#!/bin/bash
# Starting php
echo "* Starting php"
/usr/sbin/php-fpm
#Start nginx
echo "Starting nginx"
nginx -g daemon off;'

#create test.php
<? php phpinfo( ); ?>

#to debug issues
tail -f /nginx_php/error.log


FROM centos

COPY conf/nginx.repo /etc/yum.repos.d/nginx.repo

RUN \
       yum install -y nginx \
       yum install -y https://centos7.iuscommunity.org/ius-release.rpm && \
       yum -y install \ 
            php71u-fpm \
            php71u-common \
            php71u-cli --enable repo=ius && clean all

RUN mkdir /nginx_php

COPY conf/nginx.conf /etc/nginx/conf.d/default.conf

COPY fruit /nginx_php

COPY test.php /nginx_php

COPY conf/start.sh /start.sh

RUN chmod +x /start.sh

CMD /start.sh



