-- Central version control system(VCS) SVN- subversion
based on the idea that there is a single “central” copy of your project somewhere (probably on a server), 
and programmers will “commit” their changes to this central copy. 
“Committing” a change simply means recording the change in the central system.

-- Distributed VCS (Git)
is a form of version control in which the complete codebase, 
including its full history, is mirrored on every developer's computer.

git --version                                                              # to check if git is intsalled and which version is installed

git help <command>                                                         # to get help with a command from manual:  git help merge

git config --help     / git init --help                                    # to get help with a command from manual:  git help merge

-----------------------------------------------------------
SET CONFIG VALUES
-----------------------------------------------------------
git config --global user.name "Donald Decker"                              # to add username to show as author name when you make a change 

git config --global user.email "drdecker100@yahoo.com"                     # to add user email to show as author email when you make a change

git config --list                                                          # output entries


------------------------------------------------------------
Initializing GIT  [ to track that repo]
------------------------------------------------------------
mkdir project                                                              # to make a new directory

cd project                                                                 #change from current dir to new dir

git init                                                                   # Create an empty Git repository or reinitialize an existing one or to set Tracking on the dir
                                                          
git init demo                                                              # git init [directory]  Create a directory "dema" and tracks the files in that directory  

------------------------------------------------------------
GIT STATES
------------------------------------------------------------
Working Area ---> Staging Area ---> Local Repo (.git directory)/history ---> Remote Repo

Working Area contains all the files and folders for your application

Repo contains all the commited /saved changes to the Git repo

Staging area used to prepare for the next commit [ we can choose what we want files we want to commit ]

Remote Repo

--------------------------------------
FIRST COMMIT
--------------------------------------
nano README.md                                                # to create a new file if README.md does not exist in working directory

git status                                                    # Show the working tree status (changes)

git add README.md                                             # Add file contents to the index(staging area) [The "index" holds a snapshot of the content of the working tree]

git add -A / git add .                                        # Add all files to the staging area

git commit -m "First file in demo repo"    (local repo)

----------------------------------------
REPO AND GIT FOLDER
---------------------------------------
ls -al                                                        # shows list of all files both hidden and unhidden files

.git                                                           # hidden folder created after git init command 

rm -rf .git                                                    # unmakes the directory as a git branch


-------------------------------------------
STARTING WITH EXISTING PROJECT
---------------------------------------------
cd demo

git init

git add *                                                      # adding both files to staging area

git commit                                                     # open an editor

------------------------------------------
COMMIT HISTORY WITH LOG AND SHOW
------------------------------------------

git log                                                        # commit id - SHA-1 identifier  # author and #date

git show                                                       # will show the last commit and a diff containing all the changes

------------------------------------------
EXPRESS COMMITS
------------------------------------------

git ls-files
[to show all files being tracked]

git -am "Updating README with express commit"

------------------------------------------
BACKING OUT CHANGES (REMOVE FILES FROM STAGING AREA)
------------------------------------------
git restore --staged README.md                                  # to unstage area

git restore README.md                                           # to working directory, restore changes

git reset README.md                                             # to unstage a file from staging area to working area

git rm --cached README.md                                       # to unstage a file from staging area to working area

git reset                                                       # to unstage all files from the staging area to working area

------------------------------------------
HISTORY AND MAKING NEW COMMANDS WITH ALIAS
------------------------------------------
git log --oneline --graph --decorate --all

git config --global alias.hist "log --oneline --graph --decorate --all"                   # to create an entry in global config

git config --global --list

git config --list                                                                         # to show entry of global config file

git hist                                                                                  # to use git alias created

git config --global --unset alias.history "log --oneline --graph --decorate --all"        # to remove an entry in global config file --unset

--------------------------------------------
RENAME AND DELETE FILES
--------------------------------------------
git mv example.txt demo.txt

git commit -m "renaming example"


---------------------------------------------
MANAGING FILES OUTSIDE OF GIT
---------------------------------------------
touch myfile.txt

mv LICENCE.md LICENCE.txt

git status                                                                                # shows untracked

git add -u                                                                                # picks up only the tracked changes (renaming)

git add -A                                                                                # picks up all files(all type of modifications) 

rm myfile.txt
                                                                             
git commit -m "remove myfile.txt"


----------------------------------------------------------
EXCLUDING UNWANTED FILES
----------------------------------------------------------
touch application.log                                                         # create a log file

nano .gitignore                                                               # add files we want git to ignore
   *.log                                                                      # one expression per line
   *.pyc
   
git add .gitignore

git commit -m "Adding ignore file"

git status

---------------------------------------------------------
GIT DIFF
---------------------------------------------------------

git diff                                                             # Show changes between commits, commit and working tree; show changes between the working tree and the index 

git difftool                                                         # Show changes using common diff tools

---------------------------------------------------------
BRANCHING AND MERGE TYPES
---------------------------------------------------------
Branches are the names or lables we give timelines in Git

Types Of Merges
> Fast Forward - Simplest case, like never branched , can be disbaled

> Automatic - Noncoflicting merge detected, preserves both timelines,merge commit on destination

> Manual - Automatic Merge Not Possible, conflicting merge state, changes saved in Merge commit

-----------------------------------------------------------
SPECIAL MARKERS
-----------------------------------------------------------
Like pointers

HEAD > points to Last Commit of current branch > can be moved

------------------------------------------------------------
BRANCHING 
------------------------------------------------------------
git branch                                               # shows the local branches

git checkout -b updates

nano LICENCE.md

git add .

git commit -m "Adding updates to branch"

git history (git log --oneline --graph --decorate --all)

git diff updates master

git difftool updates master

git checkout master    

git merge updates

git history

git branch -d updates   #to delete branch


------------------------------------------------------------
CONFLICT RESOLUTION
------------------------------------------------------------
git merge very_bad (master|MERGING)

cat LICENCE.md

git diff

git mergetool   #to resolve conflicts

git commit -m "Resolving conflict"

git status   # a copy of the old merge file (.orig) is still in directory

nano .gitignore 

git commit -am "updating to exlcude merge files"

rm LICENCE.md.orig

-------------------------------------------------------------
MARKING SPECIAL EVENTS WITH TAGGING
-------------------------------------------------------------
Tags are just labels that you can put at any arbitrary commit point

git tag mytag

git tag --list

git tag -d mytag

git tag -a v1.0 -m "Release 1.0"

git show v1.0

-------------------------------------------------------------
SAVING WORK IN PROGRESS WITH STASHING
-------------------------------------------------------------
nano LICENCE.md

git stash

git stash list

git commit -am "updating README file"

git stash pop

git commit -am "updating licence file"

--------------------------------------------------------------
TIME TRAVEL WITH RESET AND REFLOG
--------------------------------------------------------------
3 ways of resetting = soft reset, mixed and hard

— soft
When we execute git reset --soft B with the intention of removing the commit C and pointing the master/HEAD to B.
The master/HEAD will now point to B, but the index still has changed from C.

— mixed
Execute git reset --mixed B.
On execution, master/HEAD will point to B and the index is also modified to match B because of the mixed flag used.
If we run git commit at this point, nothing will happen since the index matches HEAD.

— hard
Execute git reset --hard B
On execution, master/HEAD will point to B and modifies your working directory
The changes added in C and all the uncommitted changes will be removed.


git reset 6ad47df --soft

git reset 6ad47df --mixed

git reset 6ad47df --hard #most destructive, any changes are wiped out

------------
git log                                                  # shows commit logs [commit id, author, date, and comment]

git reflog                                               # shows all different actions taken in repo

--------------------------------------------------------------------
LINKING TO OUR GITHUB REPO
--------------------------------------------------------------------
git remote manages all remote connections from our current local repository 
to a remote or another repo someplace on the internet

git remote -v  # to check whether a remote is set

git branch -a  # to check all branches

git remote add origin https://github.com/drdecker100/demo.git   #by convention,the first and primary repo is named origin 

git remote rm origin # to unlink from github repo
--------------------------------------------------------------------
PUSHING CHANGES TO GITHUB
--------------------------------------------------------------------
git status

git push -u origin master --tags  #-u tracking branch between the master branch on the local repo(master) and the master branch on the remote repo(origin)

#origin = name of the remote repo  
#master = name of branch we will push up
#--tags = to send all tags we have in our git repo

git push --set-upstream origin master

------------------------------------------------------------------
GENERATING AN SSH KEY
------------------------------------------------------------------
cd ~

ls .ssh

mkdir .ssh

cd .ssh

pwd

ssh-keygen -t rsa -C "drdecker100@gmail.com"  # -t=type ; -C=common name

copy content of the public key (id_rsa.pub)

-----------------------------------------------------------------
VERIFYING SSH AUTHENTICATION WITH GITHUB
-----------------------------------------------------------------

Add SSH KEY in GITHUB

verifying with ssh command

ssh -T git@github.com

git clone git@github.com:drdecker100/demo.git 


----------------------------------------------------------------
STARTING REMOTE WITH A STARTER REPO
----------------------------------------------------------------

create a repo and initialize with files - licence and README files

----------------------------------------------------------------
CREATE LOCAL COPY WITH CLONE  (CLONING A REMOTE REPO)
----------------------------------------------------------------
git clone <url>  <where to clone>

git clone ../remote_repo.git .                                             # . means this directory

git clone git@github.com:drdecker100/demo.git .                            #  clone the repo into this current directory 

ls -al

git remote -v                                                              # to view information about the remote repo

git branch -a                                                              # list all branches both local and remote

git clone git@github.com:drdecker100/demo.git my_new_name

rm -rf my-website
------------------------------------------
SEEDING THE REPO WITH SAMPLE CONTENT
------------------------------------------
www.initialzr.com

cp -R ~/Downloads/initializr/* .

ls -l 

git status

git add .

git status 

git commit -m "initial website files"

---------------------------------------------
PUBLISH BACK TO GITHUB(publish local changes)
---------------------------------------------
git push origin master  

#origin remote reference  master-local branch

#when we have tracking branches, the remote and local branches are optional

git push


---------------------------------------------------
FETCH and PULL
---------------------------------------------------
pull                                            --> fetch and merge

fetch                                           --> to fetch update, but does not merge


--------------------------------------------------
Updating Repo and Remote References
--------------------------------------------------
git remote -v

git remote set-url origin git@github.com:drdecker100/demo.git

git remote show origin

#creating a new branch [ feature-lipsum ]

#md file = markdown file


------------------------------------------------------
COMMIT DETAILS GOING DEEPER
------------------------------------------------------
git status

git pull                                       # developers could be working on a code at the same time, so its prudent to pull before working on a code to get the latest changes

git pull origin master                         # means the remote master branch is origin and the local branch is master. Fetching changes/update from the remote brach to the local branch 

git show <sha-1>                               # Shows one or more objects (blobs, trees, tags and commits).

-----------------------------------------------------
LOCAL BRANCHES
-----------------------------------------------------
git checkout -b remove-ipsom

git push -u origin remove-ipsum
 
--------------------------------------------
merging locally
--------------------------------------------
git checkout master

git pull                                              # Fetch from and integrate with another repository or a local branch

git merge remove-ipsum

git branch -d remove-ipsum

git fetch -p                                          #to removes any dead branches

--------------------------------------------------
LOCALLY SWITCH TO A BRANCH ON GITHUB
--------------------------------------------------
git fetch  #update our remote

git pull

git branch -a

git checkout update-README

--------------------------------------------------
CLEANING UP BY DELETING BRANCHES AND REFERENCES
--------------------------------------------------   
git pull --all # get updates from all remote repos

git push origin :uodate-README

-------------------------------------------------
PULL WITH REBASE
-------------------------------------------------
pwd

#rebase rewinds the current commits that are on your branch
#to a point to where your branch you're merging in originally diverged;
#then playing back the commits that happened on the branch that you're wanting to bring in;
#and after that, playing on top of that any commints that have happened on the branch that you are currently working on

git fetch                                                               # to fetch update, but does not merge

git pull --rebase                                                       #applying changes from Github before add changes locally

git push

------------------------------------------------
GITHUB GRAPH
------------------------------------------------
git log --oneline --graph

in github, insights, network

------------------------------------------------
SETTING THE DEFAULT BRANCH
------------------------------------------------
create branch develop in Github

under settings, change default branch

--------------------------------------------------
SICIAL CODING-FORKING A GITHUB REPO
--------------------------------------------------
#forking a repo, then make some changes

#go to the public repo you want to forking

https://github.com/scm-ninja/starter-web

automatically, adds to your profile

-------------------------------------------------
CREATING A BRANCH ON YOUR FORK 
-------------------------------------------------
// delete branch locally
git branch -d localBranchName

// delete branch remotely
git push origin --delete remoteBranchName

copy url from github

locally, paste url

git clone git@github.com:drdecker100/starter-web.git

git checkout -b feature-README

nano README.md

git add README.md

git status

git commit -m "Adding README file"

git push -u origin feature-README


--------------------------------------------------
PULL REQUESTS
--------------------------------------------------
submit these contributions to our upstream fork repo, click on
"compare and pull request" 

By default, the pull request is going to setup the relationship back to the upstream repo

Happens when your repo is part of a fork, which it is.

A pull request is the request from the upstream repo to pull in your changes


------------------------------------------------
SYNCHRONIZE CHANGES BACK TO YOUR FORK
------------------------------------------------
Click star to send us notifactions later

git remote add upstream git@github.com:scm-ninja/starterweb.git

 
------------------------------------------------
transfer GITHUB ORGANIZATIONS
------------------------------------------------
under personal account, click on repo,settings, and then transfer button

-----------------------------------------------------------------
COMMON WORKFLOW
-----------------------------------------------------------------
-----------------------------------------------------------------------creatinng a local repo
* mkdir gitlearnhub 
* cd gitlearnhub
* touch demo.txt
* git init 
* git status
* git add demo.txt / git add .
* git commit -m "[workflow] Creating a new file"


-----------------------------------------------------------------------cloning a repo
* git clone git@github.com:scm-ninja/starterweb.git .
* git remote -v
* git branch -a 

* git checkout master 
* git pull

* touch demo.txt 

* git branch workflow                                    # to create a branch with name calc-divide
* git checkout workflow                                  # switches from the current branch to the new branch

* git status                                             # to check for changes 
* git add .                                              # add changes to staging area
* git commit -m "[workflow] cloned a repo                # the changes does not affect the local master branch and the remote repo

* git push -u origin calc-divide                         #-u means to associate our local branch to the remote repo branch, so we can do git pull /push in the future


# for unittest purposes, some people push up frokm the branch to the remote repo.
# If everything works well, we can merge our branch to the master branch

* git checkout master                                      # to switch back to master branch

* git pull origin master                                   # to get update from the remote in case of some changes befre we commit anything to master

* git branch --merged                                      # to

* git merge calc-divide                                    # merge changes to the master branch

* git push origin master                                   # the changes will be push to the master 


# we need to delete the branch
* git branch --merged                                      # to double -check if our merge worked. so we will see both branches

* git branch -d workflow                                   # to delete our local branch

* git push origin --delete workflow                        # to delete a remote branch








