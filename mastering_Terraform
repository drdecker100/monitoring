#Mastering Terraform
#Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. 
Terraform can manage existing and popular service providers as well as custom in-house solutions. 
Configuration files describe to Terraform the components needed to run a single application or your entire datacenter.

----------------------------------------
what is terraform(devloped by HashiCorp)
------------------------------------------- 
Terraform is  tool to write, plan and create infrastructure as code[Script your whole infrastructure]

-------------------------------------------
WHY INFRASTRUCTURE AS CODE
-------------------------------------------
Problem
-keeping track of resources created; who created what? 

Infrastructure as code enables you to quickly set up your complete infrastructure by running a script. 
You can do that for every environment, from development to production, passing through staging, QA, and more. 
IaC can make the entire software development lifecycle more efficient.

-------------------------------------------
INSTALLING Terraform
-------------------------------------------
Download installer from terraform.io

Go to Control Panel -> System -> System settings -> Environment Variables.
Scroll down in system variables until you find PATH.
Click edit and change accordingly.
BE SURE to include a semicolon at the end of the previous as that is the delimiter, i.e. c:\path;c:\path2
Launch a new console for the settings to take effect.

or 
$env:Path += ";C:\Users\HP.DESKTOP-MVC2C5I\Downloads>terraform" in powershell

-----------------------
SETTING UP AWS ClI
------------------------
aws configure --profile terraform-user      #to set-up user with access key

ACccess key for user(terraform_user) = AKIA53VRCZIC5TSBOQ7J
yxL7EIFW9meLJVdMdHJ+Z1qn6xGBZgHM+Hk362Ci
sigh in =  https://952780376581.signin.aws.amazon.com/console

aws iam list-users --profile terraform-user    #to view user

------------------------
TERRAFORM FILE
------------------------
#Terraform init
The terraform init command is used to initialize a working directory containing Terraform configuration files. 
This is the first command that should be run after writing a new Terraform configuration or cloning an existing one from version control.

#Terraform plan
The terraform plan command is used to create an execution plan. Terraform performs a refresh, unless explicitly disabled, 
and then determines what actions are necessary to achieve the desired state specified in the configuration files.

#Terrafom apply
The terraform apply command is used to apply the changes required to reach the desired state of the configuration, 
or the pre-determined set of actions generated by a terraform plan execution plan.

#Terraform destroy

----------------------------------
TERRAFORM STATE FILES
----------------------------------
erraform must store state about your managed infrastructure and configuration. 
This state is used by Terraform to map real world resources to your configuration, 
keep track of metadata, and to improve performance for large infrastructures. 
This state is stored by default in a local file named "terraform.

---------------------------------
TERRAFORM PROVIDER AWS ACCESS
---------------------------------
you need to specify provider in script

provider "aws" {
    region = "eu-west-1"
    #access-key = "AKIA53VRCZIC5TSBOQ7J"
    #secret-key = "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"
    profile = "terraform-user"
}

#either by providing profile or by key

----------------------------------
TERRAFORM VARIABLES
----------------------------------
Terraform variables can be defined within the infrastructure plan but are recommended to be stored in their own variables file. 
All files in your Terraform directory using the . tf file format will be automatically loaded during operations. 
Create a variables file, for example, variables.tf and open the file for edit.

provider "aws" {
    region = "eu-west-1"
    #access-key = "AKIA53VRCZIC5TSBOQ7J"
    #secret-key = "yxL7EIFW9meLJVdMdHJ+Z1qn6xGBZgHM+Hk362Ci"
    profile = "terraform-user"
}

#This is a string variable

variable "firststring" {
    type = string
    default = "this is my first string"
}

variable "multilinestring" {
    type = string
    default = <<EOH
    this is a multiline
    string
    newline
    EOH
}

output "myfirstoutput" {
    value = "${var.firststring}"
}

output "mymultilineoutput" {
    value = "${var.multilinestring}"
}

#This is my maps example

variable "mapexample" {
    type = map
    default = {
        "useast" = "ami1"
        "euwest" = "ami2"
    }
}

output "mapoutput" {
    value = "${var.mapexample["euwest"]}"
}

#this is array/lists

variable "mysecuritygrouplist" {
    type = list
    default = ["sg1","sg2","sg3"]
}

output "sgoutput" {
    value = "${var.mysecuritygrouplist[0]}"
}

#this is a boolean

variable "testbool" {
    default = true
}

output "booloutput"{
    value = "${var.testbool}"
}

#terraform inputs outputs
variable "myInputVariable" {
    type = string
}

output "myOutputVariable" {
    value = "${var.myInputVariable}"
}

-------------------------------
TERRAFORM INPUTS AND OUTPUTS
-------------------------------
#A variable whose Output property is Yes is an output variable. 
When the script runs, any value assigned to the variable is saved for use outside of the script. 
Its value is output to external storage when the script executes.


---------------------------
USING Terraform ( S3 bucket)
---------------------------
provider "aws" {
    region = "us-east-1"
    #access-key = "AKIA53VRCZIC5TSBOQ7J"
    #secret-key = "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"
    profile = "terraform-user"
}
#creating a s3 bucket
resource "aws_s3_bucket" "mybucket" {
    bucket = "mybucket-tfcourse-01"
    acl = "private"
    #region = "us-east-1"

    #tags {
    #    Environment = "Dev"
    #}
}

#uploading to s3 bucket
resource "aws_s3_bucket_object" "myfirstobject" {
    bucket = "${aws_s3_bucket.mybucket.id}"
    key    = "testfile.jpg"
    source = "C:\\Users\\HP.DESKTOP-MVC2C5I\\Pictures\\Screenshots\\python.jpg"
    etag   = "${md5(filemd5("C:\\Users\\HP.DESKTOP-MVC2C5I\\Pictures\\Screenshots\\python.jpg"))}"
}

-------------------------------------
LAUNCH EC2 INSTANCE USING TERRAFORM 
-------------------------------------
provider "aws" {
    region = "us-east-2"
    #access-key = "AKIA53VRCZIC5TSBOQ7J"
    #secret-key = "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"
    profile = "terraform-user"
}

resource "aws_key_pair" "terraform-course-2" {
  key_name = "terraform-course-2"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCUfh7epBQdUejSXob/+t+mC/5ijim7LVx97Gm2L3hbuJMeli+tGkfWAsKmOcgSXGlsWjrgQ3qXYFGxA/Xkw63yenOk51Py9ly7DBYRd0O+ILlGSJGuGLzCiQkrsMN0SPYC2WMrM+MRlmlQ/of7O9fRpt5w4GVmv8rtNFVduQ/R2YNa/TqXnesqM9GgaXPk0wdxQ12Ahtlptatu8URMtTh+Qbuz4C5N+9SE8FFHhRzOKuEkXvQfg51qwCjxlPOwySdykkGwzpdw9bJY+GnV/5jBCa52kRJwgIEzTTS8XdDUsLHVgNmjLDDnYKtCZ3TGwbbPQERO1MyFoO4h/tNDbuXv terraform-course-2"
}

variable "vpcid" {
    type = string
    default = "vpc-2e55fa45"
}

resource "aws_security_group" "terraform_ec2_sg" {
    name    = "terraform_ec2_sg"
    description = "terraform course for ec2"
    vpc_id  = "${var.vpcid}"

    ingress {
        from_port = 22
        to_port   = 22 
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    egress {
        from_port = 22
        to_port   = 22 
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }       
}

variable "amiid" {
    default = "ami-07efac79022b86107"
}

resource "aws_instance" "terraform_ec2_instance" {
    ami         = "${var.amiid}"
    instance_type = "t2.micro"
    #key_name = "terraform-keys2"
    vpc_security_group_ids = ["${aws_security_group.terraform_ec2_sg.id}"]       
}